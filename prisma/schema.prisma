generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ProjectStatus {
  active
  completed
  archived
}

enum TaskStatus {
  todo
  in_progress
  done
}

enum TaskPriority {
  low
  medium
  high
}

enum MemberRole {
  owner
  admin
  member
}

model Profile {
  id             String          @id @db.Uuid
  email          String
  fullName       String?         @map("full_name")
  avatarUrl      String?         @map("avatar_url")
  bio            String?
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  projectMembers ProjectMember[]
  ownedProjects  Project[]       @relation("ProjectOwner")
  assignedTasks  Task[]          @relation("TaskAssignee")
  createdTasks   Task[]          @relation("TaskCreator")

  @@map("profiles")
}

model Project {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  status      ProjectStatus   @default(active)
  ownerId     String          @map("owner_id") @db.Uuid
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  members     ProjectMember[]
  owner       Profile         @relation("ProjectOwner", fields: [ownerId], references: [id])
  tasks       Task[]

  @@map("projects")
}

model Task {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String?
  status      TaskStatus    @default(todo)
  priority    TaskPriority  @default(medium)
  dueDate     DateTime? @map("due_date") @db.Date
  projectId   String?   @map("project_id") @db.Uuid
  assigneeId  String?   @map("assignee_id") @db.Uuid
  createdBy   String    @map("created_by") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  assignee    Profile?  @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator     Profile   @relation("TaskCreator", fields: [createdBy], references: [id])
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model ProjectMember {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId String     @map("project_id") @db.Uuid
  userId    String     @map("user_id") @db.Uuid
  role      MemberRole @default(member)
  joinedAt  DateTime @default(now()) @map("joined_at") @db.Timestamptz(6)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}
